/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Sent2 = ee.ImageCollection("COPERNICUS/S2"),
    roi = /* color: #d63000 */ee.Geometry.Point([-32.82696533203125, 68.57688745440542]),
    gl1 = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-33.0054931640625, 68.68796674953718],
          [-33.11260986328125, 68.63399692505128],
          [-33.02471923828125, 68.61297349606234],
          [-32.9285888671875, 68.57989683944567],
          [-32.84619140625, 68.62699130504768]]]),
    gl2 = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-33.758056640625, 68.73662470760429],
          [-33.56854248046875, 68.68177387378243],
          [-33.35430908203125, 68.63679560296356],
          [-33.16204833984375, 68.63879655674131],
          [-33.11260986328125, 68.63379383729442],
          [-33.010986328125, 68.68676588280834],
          [-33.1263427734375, 68.9142087845199]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

Map.setCenter(-33.00,68.64,9);

//date ranges 
var date1 = "2018-05-14";
var date2 = "2018-07-31";

//boundaries of the study area 
var bounds = [gl1, gl2];


//create the image collection for the study area
var K_glacier = ee.ImageCollection(Sent2
      .filterDate(date1, date2)
      .filterBounds(roi)
      .sort("CloudCoverageAssessment")
      );

Map.addLayer(K_glacier);

print(K_glacier.size());

//create a list of the image collection images
var imageList = K_glacier.toList(K_glacier.size());
print(imageList);


//Function to create a mask function for the NDWI to get all water pixels
var h20mask = function(image) {
   return image.updateMask(image.gt(0.2));
};


//Function to determine the total area of lakes from all of the boundaries in the study area
function sumArea(arr) {
  var km_const = 1000000;
  var sum = 0;
  print(arr);
  for(var i = 0; i < arr.length; i++) {
    var temporary = arr[i].getInfo();
    sum+= temporary['constant'];
  }
  return sum/km_const;
}

//dictionary to hold the date:surface area k/v pairs
var valsDict = {};

//loops to go through image collections, gather water surface area, add to list
for(var i = 0; i < 92; i++) {
      var temp = ee.Image(imageList[i]);  
      var imgID = temp.id();
      Map.addLayer(temp);
      //create an array to hold all stats for the images, will clear before next image
      var boundary_stats = [];
      
      for(var j = 0; j < 2; j++) {
          var boundary = ee.Geometry(bounds[j]);
          
          //var imgDt = temp.get('system:time_start');
          
          //clip the image to one of the boundaries for processing
          var imgClp = ee.Image(temp
                        .clip(boundary)
                        );
                        
        //get the NDWI of the clipped boundary 
        var NDWI = imgClp.expression(
          "(BLUE - RED) / (BLUE + RED)",
          {
          RED: imgClp.select("B4"),    // RED
          NIR: imgClp.select("B8"),    // NIR
          BLUE: imgClp.select("B2")    // BLUE
          });
         
        //create a mask function for the NDWI to get all water pixels
        var h20_mask = h20mask(NDWI);
  
        //Using expression on the masked image to create binary 1 = water, 0 = not water
        var LS_to2 = h20_mask.expression(
            '0 * S2', {
            'S2': h20_mask
            });

        var LS_to3 = LS_to2.expression(
            '1 + S2', {
            'S2': LS_to2
            });
        
        //Generate the area and stats for the boundary area in the single image, add to an array of
        //boundary areas
        var S1_area = LS_to3.multiply(ee.Image.pixelArea());
  
        var stats = S1_area.reduceRegion({
          reducer: ee.Reducer.sum(),
          geometry: bounds[boundary],
          scale: 10,
          });
      
        boundary_stats.push(stats);
      
      }//boundary for loop
     
      //sum the SA for now that all boundaries have been calculated
      var totalArea = sumArea(boundary_stats);
      
      //add the date of the image and the totalArea as a k/v pair to the dictionary
      valsDict[i] = totalArea;

}//image list for loop

print(valsDict);

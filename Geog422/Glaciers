/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Glacier = /* color: #ff9999 */ee.Geometry.Point([-33.00481650636423, 68.64291102608853]),
    sent1 = ee.ImageCollection("COPERNICUS/S1_GRD"),
    sent2 = ee.ImageCollection("COPERNICUS/S2"),
    Glacier_poly = 
    /* color: #0fd6c8 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-33.50262451171875, 68.81140590731658],
          [-33.50262451171875, 68.3824349257512],
          [-32.17327880859375, 68.3824349257512],
          [-32.17327880859375, 68.81140590731658]]], null, false),
    Glacier_el_change = 
    /* color: #ffffff */
    /* shown: false */
    ee.Geometry.LineString(
        [[-33.05724458712461, 68.64767555630118],
         [-32.94532136935117, 68.60889063093741]]),
    Glacier_boundaries = 
    /* color: #05d1d6 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-32.96883303015629, 68.60240620192356],
          [-32.95578676550785, 68.60891862526032],
          [-32.94068056433598, 68.61367650913809],
          [-32.9200811991016, 68.61517878921833],
          [-32.8981085428516, 68.61392689613653],
          [-32.871329368046915, 68.61142290041482],
          [-32.86171633093754, 68.61217412847057],
          [-32.86720949500004, 68.62719340940313],
          [-32.8926153787891, 68.64037969349789],
          [-32.912528098515665, 68.64688110018088],
          [-32.92763429968754, 68.65313067375519],
          [-32.94617372839848, 68.66462533348042],
          [-32.9805060037891, 68.68915147537108],
          [-33.00110536902348, 68.70661286747297],
          [-32.99914665021497, 68.72256562961313],
          [-33.02249259748059, 68.75543221366306],
          [-33.04721183576184, 68.81059866093068],
          [-32.92589391211832, 68.89762112436873],
          [-32.869588980477694, 68.96673357181102],
          [-32.83800328711832, 69.0130163373024],
          [-32.87916162452793, 69.09794223893503],
          [-32.91486719093418, 69.14443812497123],
          [-32.87916162452793, 69.1722882069441],
          [-32.81461694679356, 69.2127782918781],
          [-32.78303125343418, 69.28381931701665],
          [-32.88328149757481, 69.33331293336927],
          [-33.30625513038731, 69.33912827280695],
          [-33.55207422218418, 69.3042127510628],
          [-33.74460625403975, 69.21365675159939],
          [-33.99591850989913, 69.10421391666914],
          [-34.179018288475326, 68.9426492665613],
          [-34.217470436912826, 68.88781087920682],
          [-34.15292575917845, 68.84225597467258],
          [-34.084942070173696, 68.76926128439554],
          [-34.01765081040807, 68.7498580313138],
          [-33.91877385728307, 68.73043786652508],
          [-33.854229179548696, 68.72246572425001],
          [-33.78693791978307, 68.7105021679731],
          [-33.749859062361196, 68.70501672794481],
          [-33.71278020493932, 68.69304381690135],
          [-33.637249199079946, 68.67657058377095],
          [-33.57545110337682, 68.66508205944153],
          [-33.486187187361196, 68.65508724186975],
          [-33.431255546736196, 68.64658813752997],
          [-33.38984436280095, 68.64258461958354],
          [-33.34521240479314, 68.6418344096919],
          [-33.31362671143376, 68.64333480435582],
          [-33.25594848877751, 68.64558520796352],
          [-33.2113165307697, 68.64508513780869],
          [-33.17561096436345, 68.64058400404969],
          [-33.149518435066575, 68.63908342516746],
          [-33.116559450691575, 68.63658223704802],
          [-33.08978027588689, 68.63007784136781],
          [-33.07192749268376, 68.62357155805158],
          [-33.053388063972825, 68.61506049242736],
          [-33.03210205323064, 68.61105416756027],
          [-32.9751104760822, 68.59426991119402]]]),
    Gl_b = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-33.090157011173716, 68.8191964369048],
          [-33.103889921329966, 68.8638083601306],
          [-32.837471464298716, 69.00399655507665],
          [-32.859444120548716, 69.04627250842782],
          [-33.197273710392466, 69.05805593284803],
          [-33.252205351017466, 68.97445348487469],
          [-33.763069608829966, 68.93993641025737],
          [-33.359322050236216, 68.643850149303],
          [-33.037971952579966, 68.71176104596145]]]),
    Gl_b2 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-33.35162575113625, 68.63383175019695],
          [-33.33548958170265, 68.63283107399235],
          [-33.29085762369484, 68.63383175019695],
          [-33.26339180338234, 68.63483238173008],
          [-33.23146278726906, 68.63308124723154],
          [-33.20022041666359, 68.63195544566747],
          [-33.173097919105, 68.64021001094447],
          [-33.14903309303549, 68.63830004087984],
          [-33.099251293719085, 68.63117066954689],
          [-33.0783572984986, 68.62365546864397],
          [-33.04814489615485, 68.61264057501425],
          [-33.01552923453376, 68.60575351959075],
          [-33.00076635611579, 68.60024235344125],
          [-32.98669012320563, 68.59535632504942],
          [-32.971927244787665, 68.60512731884171],
          [-32.92386205924079, 68.6216531629747],
          [-32.91562231314704, 68.61952551732418],
          [-32.86893041861579, 68.61051207444966],
          [-32.82979162467048, 68.60863381805126],
          [-32.785159666662665, 68.60437585488413],
          [-32.81056555045173, 68.62428115250636],
          [-32.851077635412665, 68.63141271484304],
          [-32.89811285269782, 68.64054280705146],
          [-32.93138997716483, 68.65506351687624],
          [-32.990779393439944, 68.68963920212593],
          [-33.00039243054932, 68.69924444703105],
          [-33.01206540418213, 68.71719642465246],
          [-33.08423172599185, 68.70206295302691],
          [-33.18310867911685, 68.68122819287262],
          [-33.359233251870755, 68.64375166312377]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
Map.setCenter(-33.00,68.64,9);
/*
var K_glacier = ee.Image(sent1 
        .filterDate("2014-06-14", "2021-01-01")
        .filterBounds(Glacier)
        .sort("CLOUD_COVERAGE_ASSESSMENT")
        .first()
  );
  
Map.addLayer(K_glacier);
*/
//  NDWI  (blue - red / blue + red)
var K_glacier = ee.Image(sent2 
        .filterDate("2018-05-14", "2018-07-31")
        .filterBounds(Glacier)
        .sort("CLOUD_COVERAGE_ASSESSMENT")
        .first()
        .clip(Gl_b)
  );

var falseColor = {
      bands: ['B8', 'B4', 'B3'],
      min:0,
      max: 9000
};
  
Map.addLayer(K_glacier, falseColor, '2018 falsecolor');

//K-glacier 2019 ** NOT NESSESARY 
/*
var K_glacier2 = ee.Image(sent2
  .filterDate('2019-05-14', '2019-07-31')
  .filterBounds(Glacier)
  .sort('CLOUD_COVERAGE_ASSESSMENT')
  .first());

Map.addLayer(K_glacier2, falseColor, '2019 falsecolor');
*/

/*
var dataset = ee.Image('OSU/GIMP/DEM');
var elevation = dataset.select('elevation');
var elevationVis = {
  min: 0.0,
  max: 2000.0,
};
Map.setCenter(-41.0, 76.0, 4);
Map.addLayer(elevation, elevationVis, 'Elevation');
*/

//clasisfier test of surface glacial lakes Gl_b (one)
var NDWI = K_glacier.expression(
        "(BLUE - RED) / (BLUE + RED)",
        {
          RED: K_glacier.select("B4"),    //  RED
          NIR: K_glacier.select("B8"),    // NIR
          BLUE: K_glacier.select("B2")    // BLUE
        });

Map.addLayer(NDWI, {min: 0, max: 1}, "NDWI");
var h20mask = function(image) {
  return image.updateMask(image.gt(0.2));
};
// Convert pixels with water to 1
var h20 = h20mask(NDWI);
Map.addLayer(h20,{},"h20");

var LS_to0 = h20.expression(
    '0 * S2', {
      'S2': h20
});

var LS_to1 = LS_to0.expression(
    '1 + S2', {
      'S2': LS_to0
});
// Visualize
//Map.addLayer(LS_to1, {color:'#00FF00', min:-1,max:1}, "water");
Map.addLayer(LS_to1, {min:0,max:1, palette:['black', 'white']}, "water");

//Calculate the water surface area
//var water = 1;
//var waterMap = LS_to1.gt(LS_to1);
//var area = ee.Image.pixelArea();

var LS_PA = LS_to1.multiply(ee.Image.pixelArea());

//var waterArea = waterMap.multiply(area).rename('waterArea');

var stats = LS_PA.reduceRegion({
    reducer: ee.Reducer.sum(), 
    geometry: Gl_b, 
    scale: 10,
  });

print(stats);




//TEST FOR BOUNDARY PARTITIONING 
//clasisfier test of surface glacial lakes Gl_b2 
var K_glacier_gl_b2 = ee.Image(sent2 
        .filterDate("2018-05-14", "2018-07-31")
        .filterBounds(Glacier)
        .sort("CLOUD_COVERAGE_ASSESSMENT")
        .first()
        .clip(Gl_b2)
  );

var falseColor = {
      bands: ['B8', 'B4', 'B3'],
      min:0,
      max: 9000
};
  
Map.addLayer(K_glacier_gl_b2, falseColor, '2018 falsecolor');

var NDWI2 = K_glacier_gl_b2.expression(
        "(BLUE - RED) / (BLUE + RED)",
        {
          RED: K_glacier_gl_b2.select("B4"),    //  RED
          NIR: K_glacier_gl_b2.select("B8"),    // NIR
          BLUE: K_glacier_gl_b2.select("B2")    // BLUE
        });

Map.addLayer(NDWI2, {min: 0, max: 1}, "NDWI");
var h20mask = function(image) {
  return image.updateMask(image.gt(0.2));
};
// Convert pixels with water to 1
var h20_2 = h20mask(NDWI2);
Map.addLayer(h20_2,{},"h20");
var LS_to2 = h20_2.expression(
    '0 * S2', {
      'S2': h20_2
});
var LS_to3 = LS_to2.expression(
    '1 + S2', {
      'S2': LS_to2
});
// Visualize
//Map.addLayer(LS_to1, {color:'#00FF00', min:-1,max:1}, "water");
Map.addLayer(LS_to3, {min:0,max:1, palette:['black', 'white']}, "water");
//Calculate the water surface area

var LS_PA_2 = LS_to3.multiply(ee.Image.pixelArea());

var stats_2 = LS_PA_2.reduceRegion({
    reducer: ee.Reducer.sum(), 
    geometry: Gl_b2, 
    scale: 10,
  });

print(stats_2);





//TRYING TO SUM OUT ALL SURFACE AREAS
var km_const = 1000000;

//create a list of the boundaries water areas
var S_A_arr =[];
S_A_arr.push(ee.Number(stats), ee.Number(stats_2));
print('S_A_arr: ',S_A_arr);




//HERE IS HOW TO GET THE AREA OF EACH POLY AND ADD TO FIND THE SQUARE KM's
var area = (ee.Number(stats.get('constant')).add(ee.Number(stats_2.get('constant')))).divide(km_const);
print("Area of stats: ",area)


//try a function to sum an array of stats
function sumArea(arr) {
  var sum = 0;
  for(var i = 0; i < arr.length; i++ ){
    //console.log('here', item['property']);
    //sum += ee.Number(item.get('constant'));
    sum += ee.Number(arr[i]);
  }
  sum.divide(km_const);
  return sum;
}

var testArea = sumArea(S_A_arr);
print(testArea);


//PROPOSED FUNCTION******************
/*
input: date ranges, study area
output: plot of GSL surface area per available image in the date range 

in: date1, date2, boundaries[]
 
  for each date in range between the inputs(inclusive):
    create water surface area mask for each boundary
    sum the boundary surface areas
    add the sum to a list of sums
    
  for each item in the list of sums
    plot each item 

out: plot

*/
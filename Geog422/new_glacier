/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Gl_b = /* color: #02edff */ee.Geometry.Polygon(
        [[[-33.9341310733289, 68.73493919213335],
          [-33.77757589754765, 68.70403750313929],
          [-33.59080831942265, 68.68307977815691],
          [-33.4617189639539, 68.66909703834628],
          [-33.0662111514539, 68.77673778678681],
          [-33.04698507723515, 68.83829726909022],
          [-33.16234152254765, 68.88287080262666],
          [-33.26390798755479, 68.93907856856983],
          [-33.37678403624713, 68.96170727249086],
          [-33.43171567687213, 68.98535858233829],
          [-33.68440122374713, 68.93309470181558],
          [-33.687340005842906, 68.93157088258475],
          [-33.84949503287654, 68.89956029374794],
          [-34.10462827452838, 68.84406038784563],
          [-34.10188169249713, 68.84703397465749]]]),
    Gl_b2 = /* color: #98ff00 */ee.Geometry.Polygon(
        [[[-33.37389293384229, 68.6452442664431],
          [-33.31484142017042, 68.63524058986961],
          [-33.25853648852979, 68.63223861592769],
          [-33.19536510181104, 68.63524058986961],
          [-33.16515269946729, 68.64074316465667],
          [-33.09374156665479, 68.63223861592769],
          [-33.00447765063917, 68.60570371226882],
          [-32.90285411548292, 68.64324388839984],
          [-32.98525157642042, 68.67922337707225],
          [-33.01409068774854, 68.71165521815766],
          [-33.06627574634229, 68.77538351296086],
          [-33.45629039477979, 68.66923487534814]]]),
    Glacier = /* color: #0b4a8b */ee.Geometry.Point([-33.17303466796875, 68.68478526071804]),
    Sent_2 = ee.ImageCollection("COPERNICUS/S2");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
Map.setCenter(-33.00,68.64,9);



//GLACIER FUNCTION-------------

function getLakesData(date1, date2, bounds, roi) {

  //create an array to hold all stats for the images 
  var boundary_stats = [];
  
  //Function to create a mask function for the NDWI to get all water pixels
  var h20mask = function(image) {
      return image.updateMask(image.gt(0.2));
      };

  var K_glacier = ee.Image(Sent_2 
        .filterDate(date1, date2)
        .filterBounds(roi)
        .sort("CLOUD_COVERAGE_ASSESSMENT")
        //.first()
        //.clip(bounds[boundary])
        );
  
  for(var image in K_glacier){
  for(var boundary in bounds) {
      
      image.clip(bounds[doundary]);

  //find all dates which have limited cloud cover in the date range in each boundary area
  //may have to be outside, otherwise, creating an image collection for every boundary (possibly inconsistent)
  /*
   var K_glacier = ee.Image(Sent_2 
        .filterDate(date1, date2)
        .filterBounds(roi)
        .sort("CLOUD_COVERAGE_ASSESSMENT")
        //.first()
        //.clip(bounds[boundary])
        );
  */
  
  //create NDWI for each image in that boundary      
  var NDWI = K_glacier.expression(
        "(BLUE - RED) / (BLUE + RED)",
        {
          RED: K_glacier.select("B4"),    //  RED
          NIR: K_glacier.select("B8"),    // NIR
          BLUE: K_glacier.select("B2")    // BLUE
        });
  
  //create a mask function for the NDWI to get all water pixels    
  var h20_mask = h20mask(NDWI);
  
  //Using expression on the masked image to create binary 1 = water, 0 = not water
  var LS_to2 = h20_mask.expression(
    '0 * S2', {  
    'S2': h20_mask
      });

  var LS_to3 = LS_to2.expression(
    '1 + S2', {
    'S2': LS_to2
      });
  
  //Generate the area and stats for the boundary area in the single image, add to an array of
  //boundary areas
  var S1_area = LS_to3.multiply(ee.Image.pixelArea());

  var stats = S1_area.reduceRegion({
      reducer: ee.Reducer.sum(), 
      geometry: bounds[boundary], 
      scale: 10,
    });
  

  boundary_stats.push(stats);
  
    }
  }

  //Function to determine the total area of lakes from all of the boundaries in the study area
  function sumArea(arr) {
    var km_const = 1000000;
    var sum = 0;
    for(var i = 0; i < arr.length; i++) {
      var temp = arr[i].getInfo();
      sum+= temp['constant']; 
    }
    return sum/km_const;
  }

  var totalAreaAtDate = sumArea(boundary_stats);
  print(totalAreaAtDate);
  
  //Need an array which has the dates and total area for that date so a plot can be made
  //total area will need to be attached to an object with the property of date, and area of GSL 
  //can then be plotted by date
  //ee.Image.date() returns the date of the image.

}
 

//Function test
var boundariesArr = [Gl_b, Gl_b2];

getLakesData("2018-05-14", "2018-07-31", boundariesArr, Glacier);


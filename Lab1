/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var elev = ee.Image("USGS/SRTMGL1_003"),
    Pod = /* color: #d63000 */ee.Geometry.Point([19.252014880661886, 42.43196051109114]),
    sent2 = ee.ImageCollection("COPERNICUS/S2"),
    Montenegro = 
    /* color: #98ff00 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[19.140434893274602, 42.46138208345641],
          [19.140434893274602, 42.26351178955889],
          [19.379387529993352, 42.26351178955889],
          [19.379387529993352, 42.46138208345641]]], null, false),
    Cairo = /* color: #0b4a8b */ee.Geometry.Point([31.235731760337355, 30.05451753787784]),
    Lsat = ee.ImageCollection("LANDSAT/LC08/C01/T2_SR");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

//LAB1 
//print(elev);
//Map.addLayer(elev, {min:0, max:4000, palette: ['green', 'yellow', 'orange']}, 'Elevation above sea level');
//var hillshade = ee.Terrain.hillshade(elev);
//Map.addLayer(hillshade, {min: 150, max:255}, 'Hillshade');

//LAB2
/*
Map.setCenter(19.2552, 42.4343, 8);

var image = ee.Image(sent2
// We will then include a filter to get only images in the date range we are interested in
.filterDate("2021-04-01", "2021-04-02")
// Next we include a geographic filter to narrow the search to images at the location of our point
.filterBounds(Montenegro)
// Next we will also sort the collection by a metadata property, in our case cloud cover is a very useful one
.sort("CLOUD_COVERAGE_ASSESSMENT")
// Now lets select the first image out of this collection - i.e. the most cloud free image in the date range
.first());

// And let's print the image to the console.
print("A Sentinel-2 scene:", image);

var image2 = ee.Image(sent2
// We will then include a filter to get only images in the date range we are interested in
.filterDate("2021-08-01", "2021-08-03")
// Next we include a geographic filter to narrow the search to images at the location of our point
.filterBounds(Montenegro)
// Next we will also sort the collection by a metadata property, in our case cloud cover is a very useful one
.sort("CLOUD_COVERAGE_ASSESSMENT")
// Now lets select the first image out of this collection - i.e. the most cloud free image in the date range
.first());

// And let's print the image to the console.
print("A Sentinel-2 scene:", image);
//APRIL
Map.addLayer(image, {bands: ['B4', 'B3', 'B2'], min:0, max:3000}, 'Panchromatic April');
Map.addLayer(image, {bands: ['B8', 'B4', 'B3'], min:0, max:3000}, 'False-Color IR April');
//AUGUST
Map.addLayer(image2, {bands: ['B4', 'B3', 'B2'], min:0, max:3000}, 'Panchromatic August');
Map.addLayer(image2, {bands: ['B8', 'B4', 'B3'], min:0, max:3000}, 'False-Color IR August');
//AGRICULTURE
Map.addLayer(image2, {bands: ['B11', 'B11', 'B4'], min:0, max:3000}, 'Agriculture August');
//LAND/WATER
Map.addLayer(image2, {bands: ['B8', 'B11', 'B4'], min:0, max:3000}, 'Land/Water August');
//FALSE COLOR URBAN
Map.addLayer(image2, {bands: ['B12', 'B11', 'B4'], min:0, max:3000}, 'False Color Urban August');
*/

//LAB3
Map.setCenter(31.24, 30.05, 9);

var image3 = ee.Image(sent2 
        .filterDate("2019-06-01", "2019-06-10")
        .filterBounds(Cairo)
        .sort("CLOUD_COVERAGE_ASSESSMENT")
        .first()
  );
  
var image4 = ee.Image(sent2 
        .filterDate("2019-12-01", "2019-12-10")
        .filterBounds(Cairo)
        .sort("CLOUD_COVERAGE_ASSESSMENT")
        .first()
  );

var trueColor = {
        bands: ["B4", "B3", "B2"],
        min: 0,
        max: 3000
        };
        
var falseColor = {
      bands: ['B8', 'B4', 'B3'],
      min:0,
      max:3000
};

Map.addLayer(image3, trueColor, 'Pancromatic-June');
Map.addLayer(image3, falseColor, 'False Color-June');
Map.addLayer(image4, trueColor, 'Pancromatic-December');
Map.addLayer(image4, falseColor, 'False Color-December');

var NDVI = image3.expression(
  '(NIR - RED) / (NIR + RED)',
  {
    RED: image3.select('B4'),
    NIR: image3.select('B8'),
    BLUE: image3.select('B2')
  }
  );
  
var NDVI2 = image4.expression(
  '(NIR - RED) / (NIR + RED)',
  {
    RED: image4.select('B4'),
    NIR: image4.select('B8'),
    BLUE: image4.select('B2')
  }
  );
  
Map.addLayer(NDVI, {min:0, max:1}, 'NDVI - JUNE');
Map.addLayer(NDVI2, {min:0, max:1}, 'NDVI - DECEMBER');

var image5 = ee.Image(Lsat
  .filterDate('2018-05-01', '2018-05-20')
  .filterBounds(Cairo)
  .sort('CLOUD_COVER_ASSESSMENT')
  .first()
  );
  
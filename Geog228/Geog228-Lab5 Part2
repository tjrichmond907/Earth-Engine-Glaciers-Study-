/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var roi = ee.FeatureCollection("users/tjrichmond907/roi-polygon"),
    image = ee.Image("users/tjrichmond907/LSAT8-8-bit_SR");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//SUBSET image via coordinates and name sub_roi
var sub_roi=(image.clip(roi));
var trueColor = {bands: ['b3', 'b2', 'b1'], min: 0, max: 255};
Map.setCenter(-123.3, 48.5, 10); // Victoria area
Map.addLayer(sub_roi, trueColor, 'Landsat 8 Subset');

///////////////////////////////////////RATIOS-INDICES
//Define variable SVR from equation
var SVR = sub_roi.expression(
        "(NIR/RED)",
        {
          RED: sub_roi.select("b3"),    //  RED
          NIR: sub_roi.select("b4"),    // NIR
        });
print(SVR);
var vegPalette = ['white', 'green'];
Map.addLayer(SVR,{min: 0, max: 15, palette: vegPalette}, 'SVR');

//for this method, run the NDVI on your image: variable is named 'ndvi' and is an expression you write:
var ndvi = sub_roi.expression(
  '((NIR-RED)/(NIR+RED))',{
    'NIR':sub_roi.select('b4'),
    'RED':sub_roi.select('b3')
  });
  print(ndvi);
  var vegPalette = ['white', 'green'];
  Map.addLayer(ndvi,{min: 0, max: 1, palette: vegPalette}, 'NDVI');

////////////////////IMAGE FILTERS
//Averaging filter - simple smoothing - even weights - the '2'represents radius from center, so this is a 5x5 kernel
var L8_NIR =  sub_roi.select('b4');
var uniformKernel = ee.Kernel.square({
  radius: 2,
  units: 'pixels',
});
// Filter the image by convolving with the smoothing filter.
var smoothed = L8_NIR.convolve(uniformKernel);
Map.addLayer(smoothed, {min: 0, max: 60},'smoothed image');

// LAPLACIAN EDGE DETECTION
var laplacianKernel = ee.Kernel.laplacian8(2);
// Print the kernel to see its weights.
print(laplacianKernel);
// Filter the image by convolving with the Laplacian filter.
var laplacian = L8_NIR.convolve(laplacianKernel)
Map.addLayer(laplacian, {min: 0, max: 80}, 'laplacian edge detection image');
